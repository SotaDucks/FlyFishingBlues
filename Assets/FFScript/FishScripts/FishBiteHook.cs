using UnityEngine;
using Obi;

public class FishBiteHook : MonoBehaviour
{
    public Transform flyhook; // ï¿½É¹ï¿½ï¿½ï¿½ Transform ï¿½ï¿½ï¿½ï¿½
    public Transform exit1; // Exit1 ï¿½ï¿½ Transform ï¿½ï¿½ï¿½ï¿½
    public float moveSpeed = 3f; // ï¿½ï¿½ï¿½ï¿½É¹ï¿½ï¿½Æ¶ï¿½ï¿½ï¿½ï¿½Ù¶ï¿?
    public float stopDistance = 0.5f; // ï¿½ï¿½Í£Ö¹ï¿½Æ¶ï¿½ï¿½ï¿½ï¿½ï¿½Ð¡ï¿½ï¿½ï¿½ï¿½
    public float waitTime = 1f; // ï¿½È´ï¿½Ê±ï¿½ï¿½
    public float escapeSpeed = 5f; // ï¿½ï¿½ï¿½ï¿½ï¿½Üµï¿½ï¿½Ù¶ï¿½
    public bool isFishBite = false; // ï¿½ï¿½ï¿½Ç·ï¿½Ò§ï¿½ï¿½

    private Animator fishAnimator; // ï¿½ï¿½ï¿? Animator ï¿½ï¿½ï¿?
    private Animator characterAnimator; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Character ï¿½ï¿½ Animator ï¿½ï¿½ï¿? 
    private bool isMovingToHook = true; // ï¿½ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½É¹ï¿½ï¿½Æ¶ï¿½
    private float waitTimer = 0f; // ï¿½È´ï¿½ï¿½ï¿½Ê±ï¿½ï¿½
    private FishDragLine fishDragLine; // ï¿½ï¿½ï¿½ï¿½ FishDragLine ï¿½Å±ï¿½

    void Start()
    {
        GameObject flyhookObject = GameObject.Find("flyhook");
        if (flyhookObject != null)
        {
            flyhook = flyhookObject.transform;
        }
        else
        {
            Debug.LogError("Î´ï¿½Òµï¿½ï¿½ï¿½Îª 'flyhook' ï¿½ï¿½ GameObjectï¿½ï¿½");
        }

        fishAnimator = GetComponent<Animator>(); // ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿? Animator ï¿½ï¿½ï¿?
        if (fishAnimator == null)
        {
            Debug.LogError("Î´ï¿½Òµï¿½ï¿½ï¿½ï¿? Animator ï¿½ï¿½ï¿½ï¿½ï¿?");
        }

        GameObject characterObject = GameObject.Find("autoriggedmainch"); // ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½Ò³ï¿½ï¿½ï¿½ï¿½Ðµï¿½ Character
        if (characterObject != null)
        {
            characterAnimator = characterObject.GetComponent<Animator>();
            if (characterAnimator == null)
            {
                Debug.LogError("Î´ï¿½Òµï¿½ Character ï¿½ï¿½ Animator ï¿½ï¿½ï¿½ï¿½ï¿?");
            }
        }
        else
        {
            Debug.LogError("Î´ï¿½Òµï¿½ï¿½ï¿½Îª 'Character' ï¿½ï¿½ GameObjectï¿½ï¿½");
        }

        fishDragLine = GameObject.Find("FlyLine").GetComponent<FishDragLine>(); // ï¿½ï¿½È¡ FishDragLine ï¿½ï¿½ï¿?
        if (fishDragLine == null)
        {
            Debug.LogError("Î´ï¿½Òµï¿½ FishDragLine ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È·ï¿½Ï¸Ã½Å±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿? FlyLine ï¿½Ï£ï¿½");
        }
    }

    void Update()
    {
        if (isMovingToHook)
        {
            MoveToHook();
        }
        else
        {
            EscapeToExit();
        }
    }

    private void MoveToHook()
    {
        float distanceToHook = Vector3.Distance(transform.position, flyhook.position);
        if (distanceToHook > stopDistance)
        {
            Vector3 direction = (flyhook.position - transform.position).normalized;
            transform.position = Vector3.MoveTowards(transform.position, flyhook.position, moveSpeed * Time.deltaTime);
        }
        else
        {
            AttachFishToFlyline(); // ï¿½ï¿½ï¿½ãµ½ FlyLine
            isMovingToHook = false; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¡ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½Ê¼ï¿½È´ï¿½
            waitTimer = waitTime; // ï¿½ï¿½ï¿½ÃµÈ´ï¿½ï¿½ï¿½Ê±ï¿½ï¿½

            // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½TroutBiteï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
            if (fishAnimator != null)
            {
                fishAnimator.SetTrigger("TroutBite");
            }
        }
    }


    private void EscapeToExit()
    {
        isFishBite = true;
        if (waitTimer > 0)
        {
            waitTimer -= Time.deltaTime; // ï¿½ï¿½ï¿½ÙµÈ´ï¿½Ê±ï¿½ï¿½
        }
        else
        {
            // ï¿½ï¿½ï¿? Character ï¿½Ç·ñ²¥·ï¿½ï¿½ï¿½ "SetTheHook" ï¿½ï¿½ï¿½ï¿½
            if (characterAnimator.GetCurrentAnimatorStateInfo(0).IsName("SetTheHook"))
            {
                if (fishDragLine != null)
                {
                    fishDragLine.StopDragging();
                }

                // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿? Rigidbody ï¿½ï¿½ IsKinematic Îª false
                Rigidbody rb = GetComponent<Rigidbody>();
                if (rb != null)
                {
                    rb.isKinematic = false; // ï¿½ï¿½ï¿? Kinematic ×´Ì¬
                }

                this.enabled = false; // ï¿½ï¿½ï¿½Ãµï¿½Ç°ï¿½Å±ï¿½
                GetComponent<FishLanding>().enabled = true; // ï¿½ï¿½ï¿½ï¿½ FishLanding ï¿½Å±ï¿½
                return; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç°ï¿½ï¿½ï¿½ï¿½
            }

            // ï¿½ï¿½ï¿½Ü¿ï¿½Ê¼Ê±ï¿½Ð»ï¿½ï¿½ï¿½ï¿½ï¿½
            
            characterAnimator.SetBool("FishOn", true); // ï¿½ï¿½ï¿½ï¿½ Character ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ FishOn Îª true
  

            // ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
            if (fishDragLine != null)
            {
                fishDragLine.StartDragging();
            }

            Vector3 direction = (exit1.position - transform.position).normalized;
            transform.position = Vector3.MoveTowards(transform.position, exit1.position, escapeSpeed * Time.deltaTime);
            transform.rotation = Quaternion.LookRotation(direction); // ï¿½ï¿½ï¿½ï¿½ Exit1

            // ï¿½ï¿½ï¿½ï¿½Ç·ñµ½´ï¿? Exit1
            if (Vector3.Distance(transform.position, exit1.position) < stopDistance)
            {
                Destroy(transform.parent.gameObject); // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¸ï¿½ï¿½ï¿½ï¿½ï¿?
                Debug.Log("ï¿½ï¿½Ä¸ï¿½ï¿½ï¿½ï¿½ï¿? 'Trout1SpawnPrefab2' ï¿½Ñ±ï¿½ï¿½ï¿½ï¿½Ù£ï¿½");
                // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ßµï¿½ï¿½Ó³ï¿?
                if (fishDragLine != null)
                {
                    fishDragLine.StopDragging();
                }
            }
        }
    }

    private void AttachFishToFlyline()
    {
        // ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îª "FlyLine" ï¿½Ä¶ï¿½ï¿½ï¿½
        GameObject flyLine = GameObject.Find("FlyLine");

        if (flyLine != null)
        {
            // ï¿½ï¿½È¡ FlyLine ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½ ObiParticleAttachment ï¿½ï¿½ï¿?
            ObiParticleAttachment[] attachments = flyLine.GetComponents<ObiParticleAttachment>();

            if (attachments.Length >= 3) // È·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Obi Particle Attachment
            {
                // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Obi Particle Attachment ï¿½ï¿½ï¿½ï¿½Ä¿ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                attachments[2].target = this.transform; // ï¿½ï¿½ï¿½ï¿½ï¿? Transform ï¿½ï¿½ÎªÄ¿ï¿½ï¿½
                Debug.Log("ï¿½ï¿½ï¿½Ñ¾ï¿½ï¿½ï¿½ï¿½ó¶¨µï¿½ FlyLine ï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ Obi Particle Attachmentï¿½ï¿½");
            }
            else
            {
                Debug.LogError("FlyLine ï¿½ï¿½Ã»ï¿½ï¿½ï¿½ã¹»ï¿½ï¿½ Obi Particle Attachment ï¿½ï¿½ï¿½ï¿½ï¿?");
            }
        }
        else
        {
            Debug.LogError("Î´ï¿½Òµï¿½ï¿½ï¿½Îª 'FlyLine' ï¿½Ä¶ï¿½ï¿½ï¿½");
        }
    }
}
